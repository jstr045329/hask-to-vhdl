------------------------------------------------------------------------------------------------------------------------
--                                           Pipeline Arbitrary Functions
--
-- This module accepts a list of inputs and turns them into a registered pipeline, using an arbitrary combinational
-- function. The function must be overloaded to accept 1 to lutInputsMax inputs, where lutInputsMax is defined in 
-- CodeGenerationParameters.hs.
--
------------------------------------------------------------------------------------------------------------------------
module Rendering.RegisteredFunction where
import DataStructures.TreeOfTuples
import Rendering.InfoTypes
import Tools.ListTools
import Rendering.InfoNameTools


------------------------------------------------------------------------------------------------------------------------
--                                        Assign Layer 0 Signals With Inputs
--
-- The signals already get generated by sameFuncEverywhereSignals, so we just need a list of strings to assign them.
--
------------------------------------------------------------------------------------------------------------------------
registerInputs :: Int -> String -> [String]
registerInputs numInputs nameStub = assignmentStrings where
    tupTree = makeTupleTree numInputs 0
    inputList = makeInList tupTree
    layer0Inputs = [x | x <- inputList, isLayer0 x]
    sigNames = map (\oneTup -> tupleToSignalName nameStub oneTup) layer0Inputs
    inputNames = map (\s -> sigName2InputName s) sigNames
    assignmentStrings = map (\(s1, s2) -> s1 ++ " <= " ++ s2 ++ ";") (zip sigNames inputNames)
    

------------------------------------------------------------------------------------------------------------------------
--                                         Same Function Applied Everywhere
--
-- exampleSig can be any Port or Signal. (Technically it can be any Information, but there's no reason to make it a 
-- constant, generic, etc.) Note that if the name of exampleSig ends with _000000 (or some other postfix number), that 
-- number will be discarded during name stub extraction. The other big difference is that exampleSig is nominally an 
-- input port, whereas generated signals are signals. In other respects, the generated signals will be like exampleSig. 
--
-- To declare the signals, call sameFuncEverywhereSignals.
--
-- To write the code, call sameFuncEverywhereCode.
--
------------------------------------------------------------------------------------------------------------------------
sameFuncEverywhereSignals :: Int -> Information -> [Information]
sameFuncEverywhereSignals numInputs exampleSig = results where
    nameStub = extractNameStub (nomen exampleSig)
    tupTree = makeTupleTree numInputs 0
    tupList = flattenShallow tupTree
    sigNames = map (\oneTup -> tupleToSignalName nameStub oneTup) tupList
    results = map (\oneName -> 
        VhdSig {
                nomen = oneName
            ,   dataType = dataType exampleSig
            ,   width = width exampleSig
            ,   sDefault = sDefault exampleSig
            ,   clocked = clocked exampleSig
            ,   comments = comments exampleSig
            ,   sReset = sReset exampleSig
            ,   assertionLevel = assertionLevel exampleSig
            }) sigNames


sameFuncEverywhereCode :: Int -> String -> String -> [String]
sameFuncEverywhereCode numInputs nameStub funcName = 
    (registerInputs numInputs nameStub) ++ (consumeChunkOfInputs funcName nameStub inputList outputList) where 
    tupTree = makeTupleTree numInputs 0
    inputList = makeInList tupTree
    outputList = makeOutputList tupTree


-----------------------------------------------------------------------------------------------------------------------
--                                       Declare All Signals Used in Pipeline
------------------------------------------------------------------------------------------------------------------------

-- TODO: PICK UP HERE: Clean out hask-to-vhdl directory. Checkout any files that are just cluttering up status w/ trivial changes 
-- (or changes I'm not 100% sure I want yet).

-- TODO: Flesh this out




















































------------------------------------------------------------------------------------------------------------------------
--                      One Function for Lowest Level, Some Other Function For All Other Levels
------------------------------------------------------------------------------------------------------------------------










------------------------------------------------------------------------------------------------------------------------
--                            Provide A List of Functions with One Element for Each Layer
------------------------------------------------------------------------------------------------------------------------
